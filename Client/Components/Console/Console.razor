@attribute [Authorize]
@using Client.RealTimeCommunication
@using Data.Converters
@using Data.Log
@using System.Linq
@using LunarAPIClient
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.DependencyInjection
@using System.Text.Json
@inject ILogEntryClient logEntryClient
@inject ICommandClient commandClient
@inject IHubConnectionFactory hubConnectionFactory
@implements IAsyncDisposable

<Stack VerticalFill VerticalAlign="Alignment.End">
    <Stack VerticalFill VerticalAlign="Alignment.End" Style="width:100%;" Tokens="@(new StackTokens() { ChildrenGap = new [] {20d}})">
        @foreach (var entry in ConsoleState.LogEntries)
        {
            <ConsoleLogEntry LogEntry=entry/>
        }
    </Stack>
    <form @onsubmit=Enter>
        <Stack Horizontal>
            <StackItem Grow=1>
                <TextField @bind-Value=ConsoleState.CurrentEntryText />
            </StackItem>
            <DefaultButton Text="Send" />
        </Stack>
    </form>
</Stack>

@code {
    [Parameter]
    public State.Console ConsoleState { get; set; } = new State.Console();

    private async Task LoadLogEntries()
    {
        var src = new CancellationTokenSource();

        try
        {
            var entries = await logEntryClient.GetLogEntriesByMissionId(Guid.Empty, src.Token);

            foreach (var entry in entries.OrderBy(e => e.LoggedAt))
            {
                ConsoleState.LogEntries.Add(entry);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task Enter()
    {
        var cmd = new AppendLogItemCommand
            {
                Payload = new PlaintextPayloadValue
                {
                    Value = ConsoleState.CurrentEntryText
                }
            };

        var src = new CancellationTokenSource();

        try
        {
            await commandClient.SendCommand(cmd, src.Token);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        ConsoleState.CurrentEntryText = "";
    }

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadLogEntries();

        hubConnection = await hubConnectionFactory.ConnectHub<LogEntry>("newMessage", (state, logEntry) => state.Console.LogEntries.Add(logEntry));
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
