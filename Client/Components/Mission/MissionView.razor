@using LunarAPIClient.NotificationClient
@using System.IO
@attribute [Authorize]

@inject IAccessTokenProvider accessTokenProvider
@inject StateContainer state
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserClient userClient
@inject ILogEntryClient logEntryClient
@inject IHubConnectionFactory hubConnectionFactory
@inject ICommandClient commandClient
@inject Mission CurrentMission
@inject Attachments Attachments

@implements IAsyncDisposable

<div style="width:100%;height:100%;display: flex;flex-direction: column;">
    <div style="overflow: auto;flex-grow:1">
        <Tabs Layout="TabLayout.Horizontal">
            @foreach (var log in CurrentMission.Logs)
            {
                <Tab>
                    <Header>@log.Name</Header>
                    <ChildContent><LogView CurrentLog=@log /></ChildContent>
                </Tab>
            }
            <Tab>
                <Header><div style="color: orangered !important;">Finalize My Log Entries</div></Header>
                <ChildContent>
                    <p>Finalizing your log entries is <b>IRREVERSABLE</b></p>
                    <Button OnClick="FinalizeLogs">Finalize My Current Logs <Icon Shape="user" Inverse="true" Solid="true" Badge="IconBadge.Danger" /></Button>
                </ChildContent>
            </Tab>
        </Tabs>
    </div>
    <div style="width: 100%;overflow: hidden;flex-shrink: 0;padding:2px;">
        <CreateLogEntryView CurrentMission=CurrentMission />
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public Guid MissionID { get; set; } = Guid.Empty;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hubConnection = await hubConnectionFactory.ConnectHub(
                accessTokenProvider,
                hub =>
                {
                    hub.On<LogEntry>(NotificationCommands.NewLogEntry, logEntry =>
                    {
                        CurrentMission.AddLogEntry(logEntry);
                        StateHasChanged();
                    });

                    hub.On<LogEntry>(NotificationCommands.UpdateLogEntry, logEntry =>
                    {
                        CurrentMission.UpdateLogEntry(logEntry);
                        StateHasChanged();
                    });

                    hub.On<LogEntryAttachmentUploadComplete>(NotificationCommands.LogEntryAttachmentUploadComplete, async uploadProgress =>
                    {
                        var src = new CancellationTokenSource();
                        await Attachments.UpdateLogEntryProgress(uploadProgress, logEntryClient, src.Token);
                        StateHasChanged();
                    });

                    hub.On<UserLogEntriesUpdated>(NotificationCommands.RefreshAllLogEntries, async userLogEntriesUpdated =>
                    {
                        var src = new CancellationTokenSource();
                        await UpdateLogEntries(src.Token);
                    });
                });

            StateHasChanged();
            var src = new CancellationTokenSource();

            state.UpdateUser(await userClient.Me(src.Token));

            await LoadLogEntries();

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    
    public async Task FinalizeLogs(MouseEventArgs args)
    {
        var src = new CancellationTokenSource();

        await commandClient.SendCommands(new[] { new FinalizeUserLogEntriesCommand() }, src.Token);
    }

    private async Task WaitOnTasks(IEnumerable<Task> tasks)
    {
        var currentTasks = tasks.ToList();
        while (currentTasks.Any())
        {
            Task finishedTask = await Task.WhenAny(tasks);
            currentTasks.Remove(finishedTask);
            StateHasChanged();
        }
    }

    private async Task UpdateLogEntries(CancellationToken cancellationToken)
    {
        var entries = (await logEntryClient.GetLogEntriesByMissionId(MissionID, cancellationToken)).OrderByDescending(e => e.LoggedAt);
        CurrentMission.SetLogEntries(entries);
        StateHasChanged();
        foreach (var entry in entries)
        {
            if (entry.Attachments?.Any() != true)
                continue;

            foreach (var attachment in entry.Attachments)
            {
                if (Attachments.Get(attachment.Id) != null)
                    continue;

                await Attachments.AddAttachment(logEntryClient, MissionID, entry.Id, attachment.Id, cancellationToken);

                StateHasChanged();
            }
        }
    }

    private async Task LoadLogEntries()
    {
        var src = new CancellationTokenSource();

        try
        {
            await UpdateLogEntries(src.Token);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private HubConnection? hubConnection;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
