@using Client.Components.Log
@using Client.RealTimeCommunication
@using Data.Log
@using LunarAPIClient
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@inject StateContainer state
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserClient userClient
@inject ILogEntryClient logEntryClient
@inject IHubConnectionFactory hubConnectionFactory
@inject ICommandClient commandClient
@inject Mission CurrentMission

@implements IAsyncDisposable

<EditForm Model=@CurrentMission OnValidSubmit=@Enter>
    <FluentTextField @bind-Value=CurrentMission.CurrentEntryText />
    <FluentButton type="submit">Send</FluentButton>
</EditForm>

<FluentTabs>
    @foreach (var log in CurrentMission.Logs)
    {
        <FluentTab>@log.Name</FluentTab>
        <FluentTabPanel><LogView CurrentLog=@log /></FluentTabPanel>
    }
</FluentTabs>


@code {
    protected async override Task OnInitializedAsync()
    {
        var src = new CancellationTokenSource();
            
        state.UpdateUser(await userClient.Me(src.Token));

        await LoadLogEntries();

        StateHasChanged();

        hubConnection = await hubConnectionFactory.ConnectHub<LogEntry>(
            SignalRCommands.NewLogEntry, 
            (logEntry) => {
                CurrentMission.AddLogEntry(logEntry);
                StateHasChanged();
            });

        await base.OnInitializedAsync();
    }

    private async Task LoadLogEntries()
    {
        var src = new CancellationTokenSource();

        try
        {
            var entries = await logEntryClient.GetLogEntriesByMissionId(Guid.Empty, src.Token);

            CurrentMission.AddLogEntries(entries.OrderByDescending(e => e.LoggedAt));

            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private HubConnection? hubConnection;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task Enter(EditContext editContext)
    {
        var cmd = new AppendLogItemCommand
        {
            Payload = new PlaintextPayloadValue
            {
                Value = CurrentMission.CurrentEntryText
            }
        };

        var src = new CancellationTokenSource();

        try
        {
            await commandClient.SendCommand(cmd, src.Token);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        CurrentMission.CurrentEntryText = "";

        StateHasChanged();
    }
}
