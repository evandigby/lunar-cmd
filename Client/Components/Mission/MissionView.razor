@using BlazorFluentUI.Routing
@using Client.Components.Log
@using Client.RealTimeCommunication
@using Data.Log
@using LunarAPIClient
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@inject StateContainer state
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserClient userClient
@inject ILogEntryClient logEntryClient
@inject IHubConnectionFactory hubConnectionFactory
@inject ICommandClient commandClient
@implements IAsyncDisposable

<Stack VerticalFill VerticalAlign="Alignment.End">
    
    <NavBar Header="One Giant Leap C&C">
    
    </NavBar>

    @foreach (var log in CurrentMission.Logs)
    {
        <LogView CurrentLog=@log />
    }
    <form @onsubmit=Enter>
        <Stack Horizontal>
            <StackItem Grow=1>
                <TextField @bind-Value=CurrentMission.CurrentEntryText />
            </StackItem>
            <DefaultButton Text="Send" />
        </Stack>
    </form>
</Stack>


@code {
    [Parameter]
    public Mission CurrentMission { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {

        CurrentMission.OnChanged += StateHasChanged;

        var src = new CancellationTokenSource();
        state.UpdateUser(await userClient.Me(src.Token));
        await LoadLogEntries();

        hubConnection = await hubConnectionFactory.ConnectHub<LogEntry>(
            SignalRCommands.NewLogEntry, 
            (logEntry) => CurrentMission.AddLogEntry(logEntry));
    }

    private async Task LoadLogEntries()
    {
        var src = new CancellationTokenSource();

        try
        {
            var entries = await logEntryClient.GetLogEntriesByMissionId(Guid.Empty, src.Token);

            CurrentMission.AddLogEntries(entries.OrderBy(e => e.LoggedAt));
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private HubConnection? hubConnection;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task Enter()
    {
        var cmd = new AppendLogItemCommand
        {
            Payload = new PlaintextPayloadValue
            {
                Value = CurrentMission.CurrentEntryText
            }
        };

        var src = new CancellationTokenSource();

        try
        {
            await commandClient.SendCommand(cmd, src.Token);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        CurrentMission.CurrentEntryText = "";
    }
}
