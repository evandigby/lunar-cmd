@using System.IO
@using LunarAPIClient.NotificationClient
@using System.Net.Http.Headers

@inject ICommandClient commandClient

<EditForm style="width: 100%" Model=@CurrentMission OnValidSubmit=@Enter >
    <div style="display: flex; flex-direction: column;">
        <div style="display: flex; flex-direction: row;flex-grow:1;">
            <InputText style="flex-grow:1;margin:2px" @bind-Value=@CurrentMission.CurrentEntryText />
            <FluentButton style="flex-shrink: 0;margin:2px; background-color:#38d39f !important;color:white !important" type="submit" Disabled=inputDisabled>Send</FluentButton>
        </div>

        @if (!clearInputFile)
        {
            <InputFile OnChange=LoadFiles multiple></InputFile>
        }
        @if (!string.IsNullOrWhiteSpace(SelectedFilesMessage))
        {
            <div style="flex-shrink:1">@SelectedFilesMessage</div>
        }
    </div>
</EditForm>

@code {
    [Parameter, EditorRequired]
    public Mission CurrentMission { get; set; } = new Mission();

    private string SelectedFilesMessage { get; set; } = string.Empty;
    private bool inputDisabled { get; set; } = false;
    private bool clearInputFile { get; set; } = false;

    IReadOnlyList<IBrowserFile>? selectedFiles;

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
    }

    private void ClearInputFile()
    {
        clearInputFile = true;
        StateHasChanged();
        clearInputFile = false;
        StateHasChanged();
    }

    private const long maxFileSize = 1024 * 1024 * 50; // 50mb
    private async Task Enter(EditContext editContext)
    {
        inputDisabled = true;
        StateHasChanged();
        var attachments = selectedFiles?.Select(f =>
            {
                return new
                {
                    file = f,
                    attachment = new LogEntryAttachment
                        {
                            Id = Guid.NewGuid(),
                            Name = f.Name,
                            Alt = "Alternate Text"
                        },
                };
            }).ToList();

        var entryCmd = new AppendLogEntryCommand
            {
                LogEntryId = Guid.NewGuid(),
                Attachments = (attachments?.Select(a => a.attachment) ?? Enumerable.Empty<LogEntryAttachment>()).ToList(),
                Payload = new PlaintextPayloadValue
                {
                    Value = CurrentMission.CurrentEntryText
                }
            };

        var src = new CancellationTokenSource();

        try
        {
            await commandClient.SendCommands(new[] { entryCmd }, src.Token);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        if (attachments != null)
        {
            using var content = new MultipartFormDataContent();
            var commands = new List<Command>();
            foreach (var attachment in attachments)
            {
                var file = attachment.file;
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize, src.Token));

                fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: attachment.attachment.Id.ToString(),
                    fileName: file.Name
                );
            }

            try
            {
                var results = await commandClient.SendAttachmentsCommand(CurrentMission.Id, entryCmd.LogEntryId, content, src.Token);

                var errors = results.Where(r => !r.Success);

                if (errors.Any())
                {
                    throw new AggregateException(errors.Select(e => new Exception(e.Error)));
                }
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
        }

        CurrentMission.CurrentEntryText = "";

        ClearInputFile();

        inputDisabled = false;
        StateHasChanged();
    }
}
